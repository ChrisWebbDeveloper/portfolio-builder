// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioBuilder.Data;

namespace portfoliobuilder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "00b0bd19-dab1-4be5-a56d-4ee893ce349d",
                            ConcurrencyStamp = "d6f69075-d9b1-48b9-a498-7af47c026e5b",
                            Name = "Superuser",
                            NormalizedName = "SUPERUSER"
                        },
                        new
                        {
                            Id = "e1f72ad0-7d23-46ba-b670-7c7195dfd4fa",
                            ConcurrencyStamp = "febd306c-9c3e-47a4-8f18-5ccaa2955c3d",
                            Name = "User Manager",
                            NormalizedName = "USER MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "27d346c3-8648-426d-9295-270cb3817ba4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e45e019c-8c8e-4ccf-8d2c-95dcb457c11d",
                            Email = "system@portfoliobuilder.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEM@PORTFOLIOBUILDER.COM",
                            NormalizedUserName = "SYSTEM@PORTFOLIOBUILDER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFP4zPX2LcsnhjDIjYWCMNnRANmyBDyYb098707ropDwJMkXTyv8cnGrHLH2AJpYKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3904a66b-b9ad-426f-9ad2-436d3caa2863",
                            TwoFactorEnabled = false,
                            UserName = "system@portfoliobuilder.com"
                        },
                        new
                        {
                            Id = "9484141c-4f0a-4536-946d-834b6b662454",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a0df11b-c98c-4a4e-aaf7-16e2aa89397a",
                            Email = "usermanager@portfoliobuilder.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERMANAGER@PORTFOLIOBUILDER.COM",
                            NormalizedUserName = "USERMANAGER@PORTFOLIOBUILDER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOtyq4vvBVS2HsyvbiZ2WibuowNY2lLXQaZ6noTs1Ej91St27+TrmCAl7+KU6a+AyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3d4e01f-a55b-46db-a22f-0cb36643ae26",
                            TwoFactorEnabled = false,
                            UserName = "usermanager@portfoliobuilder.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "27d346c3-8648-426d-9295-270cb3817ba4",
                            RoleId = "00b0bd19-dab1-4be5-a56d-4ee893ce349d"
                        },
                        new
                        {
                            UserId = "9484141c-4f0a-4536-946d-834b6b662454",
                            RoleId = "e1f72ad0-7d23-46ba-b670-7c7195dfd4fa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AboutDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "About Me",
                            Title = "About"
                        });
                });

            modelBuilder.Entity("PortfolioBuilder.Models.AboutPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AboutId")
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("AboutPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutId = 1,
                            PhotoId = 1,
                            Position = 0
                        },
                        new
                        {
                            Id = 2,
                            AboutId = 1,
                            PhotoId = 2,
                            Position = 1
                        });
                });

            modelBuilder.Entity("PortfolioBuilder.Models.CarouselPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowDescription")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("ShowName")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("CarouselPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhotoId = 3,
                            Position = 0,
                            ShowDescription = false,
                            ShowName = false
                        },
                        new
                        {
                            Id = 2,
                            PhotoId = 6,
                            Position = 1,
                            ShowDescription = false,
                            ShowName = false
                        });
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FeaturedPhotoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeaturedPhotoId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Facebook")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Instagram")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "chris@chriswebbdeveloper.co.uk",
                            Location = "Nottingham",
                            Name = "Chris Webb"
                        });
                });

            modelBuilder.Entity("PortfolioBuilder.Models.FeaturedPortfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId")
                        .IsUnique();

                    b.ToTable("FeaturedPortfolios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PortfolioId = 1,
                            Position = 0
                        },
                        new
                        {
                            Id = 2,
                            PortfolioId = 2,
                            Position = 1
                        });
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FilePath")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilePath = "img_1.jpg",
                            Name = "Photo 1"
                        },
                        new
                        {
                            Id = 2,
                            FilePath = "img_2.jpg",
                            Name = "Photo 2"
                        },
                        new
                        {
                            Id = 3,
                            FilePath = "img_3.jpg",
                            Name = "Photo 3"
                        },
                        new
                        {
                            Id = 4,
                            FilePath = "img_4.jpg",
                            Name = "Photo 4"
                        },
                        new
                        {
                            Id = 5,
                            FilePath = "img_5.jpg",
                            Name = "Photo 5"
                        },
                        new
                        {
                            Id = 6,
                            FilePath = "img_6.jpg",
                            Name = "Photo 6"
                        },
                        new
                        {
                            Id = 7,
                            FilePath = "img_7.jpg",
                            Name = "Photo 7"
                        },
                        new
                        {
                            Id = 8,
                            FilePath = "img_8.jpg",
                            Name = "Photo 8"
                        });
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomHtml")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Featured")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("FeaturedPhotoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeaturedPhotoId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Portfolios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Featured = false,
                            FeaturedPhotoId = 1,
                            Name = "Portfolio 1",
                            Position = 1,
                            Private = false,
                            Published = true
                        },
                        new
                        {
                            Id = 2,
                            Featured = false,
                            FeaturedPhotoId = 5,
                            Name = "Portfolio 2",
                            Position = 0,
                            Private = false,
                            Published = true
                        });
                });

            modelBuilder.Entity("PortfolioBuilder.Models.PortfolioCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PortfolioId", "CategoryId")
                        .IsUnique();

                    b.ToTable("PortfolioCategories");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.PortfolioPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PortfolioId", "PhotoId")
                        .IsUnique();

                    b.ToTable("PortfolioPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhotoId = 1,
                            PortfolioId = 1,
                            Position = 2
                        },
                        new
                        {
                            Id = 2,
                            PhotoId = 2,
                            PortfolioId = 1,
                            Position = 1
                        },
                        new
                        {
                            Id = 3,
                            PhotoId = 3,
                            PortfolioId = 1,
                            Position = 0
                        },
                        new
                        {
                            Id = 4,
                            PhotoId = 4,
                            PortfolioId = 1,
                            Position = 3
                        },
                        new
                        {
                            Id = 5,
                            PhotoId = 5,
                            PortfolioId = 2,
                            Position = 0
                        },
                        new
                        {
                            Id = 6,
                            PhotoId = 6,
                            PortfolioId = 2,
                            Position = 2
                        },
                        new
                        {
                            Id = 7,
                            PhotoId = 7,
                            PortfolioId = 2,
                            Position = 3
                        },
                        new
                        {
                            Id = 8,
                            PhotoId = 8,
                            PortfolioId = 2,
                            Position = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioBuilder.Models.AboutPhoto", b =>
                {
                    b.HasOne("PortfolioBuilder.Models.About", null)
                        .WithMany("Photos")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioBuilder.Models.Photo", "Photo")
                        .WithMany("FeaturedInAbout")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.CarouselPhoto", b =>
                {
                    b.HasOne("PortfolioBuilder.Models.Photo", "Photo")
                        .WithMany("FeaturedInHomeCarousel")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Category", b =>
                {
                    b.HasOne("PortfolioBuilder.Models.Photo", "FeaturedPhoto")
                        .WithMany("FeaturedInCategories")
                        .HasForeignKey("FeaturedPhotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FeaturedPhoto");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.FeaturedPortfolio", b =>
                {
                    b.HasOne("PortfolioBuilder.Models.Portfolio", "Portfolio")
                        .WithOne("FeaturedPortfolio")
                        .HasForeignKey("PortfolioBuilder.Models.FeaturedPortfolio", "PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Portfolio", b =>
                {
                    b.HasOne("PortfolioBuilder.Models.Photo", "FeaturedPhoto")
                        .WithMany("FeaturedInPortfolios")
                        .HasForeignKey("FeaturedPhotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FeaturedPhoto");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.PortfolioCategory", b =>
                {
                    b.HasOne("PortfolioBuilder.Models.Category", "Category")
                        .WithMany("Portfolios")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioBuilder.Models.Portfolio", "Portfolio")
                        .WithMany("Categories")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.PortfolioPhoto", b =>
                {
                    b.HasOne("PortfolioBuilder.Models.Photo", "Photo")
                        .WithMany("Portfolios")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioBuilder.Models.Portfolio", "Portfolio")
                        .WithMany("Photos")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.About", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Category", b =>
                {
                    b.Navigation("Portfolios");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Photo", b =>
                {
                    b.Navigation("FeaturedInAbout");

                    b.Navigation("FeaturedInCategories");

                    b.Navigation("FeaturedInHomeCarousel");

                    b.Navigation("FeaturedInPortfolios");

                    b.Navigation("Portfolios");
                });

            modelBuilder.Entity("PortfolioBuilder.Models.Portfolio", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("FeaturedPortfolio");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
